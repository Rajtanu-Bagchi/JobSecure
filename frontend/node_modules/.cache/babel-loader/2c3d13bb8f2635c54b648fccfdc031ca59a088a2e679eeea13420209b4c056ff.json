{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include auth token in all requests\napi.interceptors.request.use(config => {\n  // Get token from localStorage\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  // If token exists, add to headers\n  if (user && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // Handle 401 Unauthorized errors (token expired)\n  if (error.response && error.response.status === 401) {\n    // Clear localStorage and redirect to login\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  // Handle 403 Forbidden errors (insufficient permissions)\n  if (error.response && error.response.status === 403) {\n    console.error('Permission denied:', error.response.data.message);\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","console","data","message"],"sources":["C:/Users/Rajtanu/Documents/Desktop/Folders/Files/Hack4Bengal/Round 1/JobSecure/frontend/src/utils/axiosConfig.js"],"sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include auth token in all requests\napi.interceptors.request.use(\n  (config) => {\n    // Get token from localStorage\n    const user = JSON.parse(localStorage.getItem('user'));\n    \n    // If token exists, add to headers\n    if (user && user.token) {\n      config.headers.Authorization = `Bearer ${user.token}`;\n    }\n    \n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle 401 Unauthorized errors (token expired)\n    if (error.response && error.response.status === 401) {\n      // Clear localStorage and redirect to login\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    \n    // Handle 403 Forbidden errors (insufficient permissions)\n    if (error.response && error.response.status === 403) {\n      console.error('Permission denied:', error.response.data.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;;EAErD;EACA,IAAIJ,IAAI,IAAIA,IAAI,CAACK,KAAK,EAAE;IACtBN,MAAM,CAACJ,OAAO,CAACW,aAAa,GAAG,UAAUN,IAAI,CAACK,KAAK,EAAE;EACvD;EAEA,OAAON,MAAM;AACf,CAAC,EACAQ,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAf,GAAG,CAACI,YAAY,CAACc,QAAQ,CAACZ,GAAG,CAC1BY,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACT;EACA,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAR,YAAY,CAACS,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;;EAEA;EACA,IAAIR,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnDK,OAAO,CAACT,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACG,QAAQ,CAACO,IAAI,CAACC,OAAO,CAAC;EAClE;EAEA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}